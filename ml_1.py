# -*- coding: utf-8 -*-
"""ML_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fuJDXtK-sluSD4pX7VJU7lw1bPEkJzoD
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

EVALUATE_ONLY = True
TEST_ON_LARGE_DATASET = True
TISSUE_CLASSES = ('ADI', 'BACK', 'DEB', 'LYM', 'MUC', 'MUS', 'NORM', 'STR', 'TUM')
DATASETS_LINKS = {
    'train': '1XtQzVQ5XbrfxpLHJuL0XBGJ5U7CS-cLi',
    'train_small': '1qd45xXfDwdZjktLFwQb-et-mAaFeCzOR',
    'train_tiny': '1I-2ZOuXLd4QwhZQQltp817Kn3J0Xgbui',
    'test': '1RfPou3pFKpuHDJZ-D9XDFzgvwpUBFlDr',
    'test_small': '1wbRsog0n7uGlHIPGLhyN-PMeT2kdQ2lI',
    'test_tiny': '1viiB0s041CNsAK4itvX8PnYthJ-MDnQc'
}

from pathlib import Path
import numpy as np
from typing import List
from tqdm.notebook import tqdm
from time import sleep
from PIL import Image
import IPython.display
from sklearn.metrics import balanced_accuracy_score
import gdown

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.metrics import accuracy_score
import numpy as np
from google.colab import drive

drive.mount('/content/drive')

train_data_path = '/content/drive/MyDrive/train.npz'
test_data_path = '/content/drive/MyDrive/test.npz'

train_data = np.load(train_data_path)
test_data = np.load(test_data_path)

X_train, y_train = train_data['data'], train_data['labels']
X_test, y_test = test_data['data'], test_data['labels']

print("Train data shape:", X_train.shape, y_train.shape)
print("Test data shape:", X_test.shape, y_test.shape)

input_shape = (64, 64, X_train.shape[-1])
X_train_resized = np.array([tf.image.resize(img, input_shape[:2]).numpy() for img in X_train])
X_test_resized = np.array([tf.image.resize(img, input_shape[:2]).numpy() for img in X_test])

X_train_resized = X_train_resized / 255.0
X_test_resized = X_test_resized / 255.0

datagen = ImageDataGenerator(
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=True
)
datagen.fit(X_train_resized)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
    BatchNormalization(),
    MaxPooling2D((2, 2)),
    Dropout(0.25),

    Conv2D(64, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D((2, 2)),
    Dropout(0.25),

    Conv2D(128, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D((2, 2)),
    Dropout(0.4),

    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(len(np.unique(y_train)), activation='softmax')
])

model.compile(optimizer=Adam(learning_rate=0.001),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

early_stopping = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)
lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)

from sklearn.model_selection import train_test_split
X_train_final, X_val, y_train_final, y_val = train_test_split(X_train_resized, y_train, test_size=0.2, random_state=42)

history = model.fit(datagen.flow(X_train_final, y_train_final, batch_size=32),
                    epochs=50,
                    validation_data=datagen.flow(X_val, y_val, batch_size=64),
                    callbacks=[early_stopping, lr_scheduler])
#оценка
test_loss, test_accuracy = model.evaluate(X_test_resized, y_test)
print(f"Test Accuracy: {test_accuracy * 100:.2f}%")

model.save('CNN_or_somth.h5')

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.metrics import accuracy_score
import numpy as np
from google.colab import drive

drive.mount('/content/drive')

train_data_path = '/content/drive/MyDrive/train.npz'
test_data_path = '/content/drive/MyDrive/test.npz'

train_data = np.load(train_data_path)
test_data = np.load(test_data_path)

X_train, y_train = train_data['data'], train_data['labels']
X_test, y_test = test_data['data'], test_data['labels']

print("Train data shape:", X_train.shape, y_train.shape)
print("Test data shape:", X_test.shape, y_test.shape)

input_shape = (64, 64, X_train.shape[-1])
X_train_resized = np.array([tf.image.resize(img, input_shape[:2]).numpy() for img in X_train])
X_test_resized = np.array([tf.image.resize(img, input_shape[:2]).numpy() for img in X_test])

X_train_resized = X_train_resized / 255.0
X_test_resized = X_test_resized / 255.0

datagen = ImageDataGenerator(
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=True
)
datagen.fit(X_train_resized)

#Модель CNN
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
    BatchNormalization(),
    MaxPooling2D((2, 2)),
    Dropout(0.25),

    Conv2D(64, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D((2, 2)),
    Dropout(0.25),

    Conv2D(128, (3, 3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D((2, 2)),
    Dropout(0.4),

    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(len(np.unique(y_train)), activation='softmax')
])

model.compile(optimizer=Adam(learning_rate=0.00001),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

early_stopping = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)
lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)
#обучение
from sklearn.model_selection import train_test_split
X_train_final, X_val, y_train_final, y_val = train_test_split(X_train_resized, y_train, test_size=0.2, random_state=42)

history = model.fit(datagen.flow(X_train_final, y_train_final, batch_size=32),
                    epochs=30,
                    validation_data=datagen.flow(X_val, y_val, batch_size=32),
                    callbacks=[early_stopping, lr_scheduler])

test_loss, test_accuracy = model.evaluate(X_test_resized, y_test)
print(f"Test Accuracy: {test_accuracy * 100:.2f}%")

model.save('/content/drive/MyDrive/CNN_or_s.h5')

def load_model(model_path):
    return tf.keras.models.load_model(model_path)

loaded_model = load_model('/content/drive/MyDrive/CNN_or_s.h5')

#оценка
loaded_test_loss, loaded_test_accuracy = loaded_model.evaluate(X_test_resized, y_test)
print(f"Loaded Model Test Accuracy: {loaded_test_accuracy * 100:.2f}%")